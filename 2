#include <iostream>
#include <cmath>

const double g = 9.81;

double f(double L, double V, double alpha) {
    return L - (V * V * sin(2 * alpha)) / g;
}

double df(double V, double alpha) {
    return 1;
}

double newton_method(double (*f)(double, double, double), double (*df)(double, double), double x0, double V, double alpha, double eps, int max_iter) {
    double x = x0;
    for (int i = 0; i < max_iter; ++i) {
        double f_x = f(x, V, alpha);
        double f_derivative = df(V, alpha);
        double x_new = x - f_x / f_derivative;

        if (std::abs(x_new - x) < eps) {
            return x_new;
        }
        x = x_new;
    }
    return x;
}

int main() {
    double V = 20;
    double alpha = 30 * M_PI / 180;

    double x0 = 10;
    double epsilon = 1e-6;
    int max_iter = 1000;

    double L = newton_method(f, df, x0, V, alpha, epsilon, max_iter);
    std::cout << "Flight distance L: " << L << " meters" << std::endl;

    return 0;
}







import math

g = 9.81

def f(L, V, alpha):
    return L - (V**2 * math.sin(2 * alpha)) / g

def df(V, alpha):
    return 1

def newton_method(f, df, x0, V, alpha, eps, max_iter):
    x = x0
    for _ in range(max_iter):
        f_x = f(x, V, alpha)
        f_derivative = df(V, alpha)
        x_new = x - f_x / f_derivative

        if abs(x_new - x) < eps:
            return x_new
        x = x_new
    return x

V = 20
alpha = 30 * math.pi / 180

x0 = 10
epsilon = 1e-6
max_iter = 1000

L = newton_method(f, df, x0, V, alpha, epsilon, max_iter)
print(f"Flight distance L: {L} meters")

